import numpy as np
from scipy import stats
import matplotlib.pyplot as plt

# Dados fornecidos
dados = [
    80.46, 71.83, 64.04, 56.15, 71.05, 70.50, 75.90, 66.61, 77.61, 63.41, 67.30, 67.19, 51.19, 68.16, 54.89, 43.26,
    61.49, 65.93, 45.83, 80.25, 86.10, 88.98, 52.67, 41.29, 47.16, 57.87, 48.12, 62.13, 51.37, 86.31, 86.11, 74.57,
    67.05, 58.88, 37.21, 87.29, 79.13, 55.49, 64.23, 92.52, 32.04, 80.02, 76.40, 53.31, 68.52, 51.72, 41.07, 58.83,
    49.94, 50.85, 74.89, 63.88, 67.97, 42.81, 44.08, 76.56, 49.76, 54.36, 43.73, 57.60, 68.00, 72.24, 61.53, 61.68,
    60.60, 79.50, 49.04, 69.32, 51.09, 73.60, 64.89, 66.75, 48.68, 80.63, 33.75, 75.51, 40.17, 78.71, 50.13, 40.38,
    57.44, 63.01, 81.32, 61.54, 82.07, 87.18, 82.12, 73.17, 87.25, 50.33, 75.15, 61.10, 55.09, 97.50, 74.36, 78.46,
    32.68, 72.92, 54.47, 80.81, 39.11, 64.73, 51.39, 82.89, 68.64, 70.01, 56.95, 55.47, 57.27, 81.63, 79.62, 63.84,
    74.09, 81.99, 70.20, 78.46, 91.10, 58.48, 54.17, 49.43, 71.20, 71.10, 26.45, 61.17, 28.52, 88.08, 52.81, 80.00,
    58.49, 93.30, 55.88, 89.74, 80.65, 72.86, 57.27, 61.63, 85.25, 53.98, 64.96, 58.22, 51.23, 80.76, 59.12, 56.80,
    61.84, 74.28, 70.29, 59.50, 76.23, 73.51, 69.28, 32.08, 54.83, 62.43, 52.85, 79.05, 55.58, 54.33, 82.24, 63.38,
    64.18, 44.53, 44.71, 68.85, 66.14, 61.41, 53.69, 72.56, 50.06, 60.02, 49.31, 64.16, 58.27, 62.13, 50.60, 54.72,
    68.97, 73.45, 79.32, 53.42, 60.49, 56.99, 57.64, 57.78, 84.70, 60.18, 60.60, 83.53, 75.34, 37.10, 58.19, 78.91,
    45.46, 71.27, 61.40, 77.84, 85.08, 23.45, 72.60, 44.84, 71.07, 80.54, 41.63, 63.15, 62.24, 54.55, 50.81, 52.77,
    77.77, 76.24, 67.68, 79.56, 68.58, 43.28, 61.87, 59.77, 68.69, 90.39, 77.35, 55.23, 74.79, 39.03, 68.69, 50.75,
    62.53, 91.38, 69.78, 55.67, 64.01, 69.00, 63.80, 74.37, 94.80, 85.34, 70.51, 64.05, 59.70, 61.76, 71.11, 36.43,
    87.82, 57.44, 69.71, 61.95, 84.16, 79.27, 76.95, 86.28, 58.66, 84.10, 97.38, 82.67, 79.83, 86.31, 52.85, 49.66,
    53.54, 70.04, 55.23, 85.43, 62.51, 59.94, 49.96, 92.13, 46.24, 64.49, 46.04, 60.43, 75.05, 61.17, 47.93, 77.51,
    81.89, 56.64, 66.10, 71.44, 33.47, 84.15, 75.55, 49.62, 47.84, 57.73, 68.50, 74.51, 74.54, 75.39, 95.10, 52.78,
    70.46, 72.56, 67.48, 86.58, 62.09, 17.99, 93.67, 94.39, 29.90, 47.14, 75.08, 89.15, 79.38, 81.42, 92.43, 59.80,
    86.30, 82.67, 68.65, 38.32, 76.41, 76.00, 59.55, 91.71, 66.72, 64.76, 63.30, 63.39, 93.78, 96.40, 72.55, 73.40,
    77.36, 72.51, 80.04, 59.78, 51.89, 84.69, 49.92, 89.33, 98.87, 84.82, 94.08, 58.00, 64.85, 89.58, 69.74, 63.20,
    65.58, 58.69, 49.00, 61.42, 74.98, 60.99, 51.36, 69.61, 86.16, 64.03, 96.45, 56.98, 47.23, 78.68, 83.58, 62.61,
    61.20, 56.65, 63.12, 92.34, 94.71, 62.27, 85.32, 73.55, 96.15, 72.16, 50.83, 91.35, 46.90, 37.56, 73.80, 75.20,
    73.98, 69.07, 71.54, 35.85, 75.24, 92.62, 63.80, 75.61, 59.68, 75.52, 57.59, 79.04, 57.22, 56.09, 71.75, 57.75,
    51.49, 72.54, 83.12, 81.96, 64.39, 85.21, 76.33, 59.33, 62.70, 86.55, 22.53, 63.59, 62.36, 63.48, 53.67, 75.12,
    80.11, 72.99, 61.08, 44.17, 73.85, 56.38, 81.39, 80.22, 84.06, 66.72, 57.49, 63.47, 41.25, 52.31, 69.09, 62.69,
    93.11, 63.56, 83.82, 57.27, 72.55, 77.09, 71.15, 71.38, 79.44, 71.66, 75.12, 72.31, 70.73, 61.23, 96.05, 77.39,
    40.70, 86.78, 70.64, 57.80, 70.59, 52.08, 60.14, 64.05, 86.58, 39.61, 67.69, 67.29, 93.22, 64.42, 84.59, 54.82,
    57.91, 71.19, 52.49, 44.64, 56.30, 61.73, 73.71, 36.51, 67.83, 89.66, 86.33, 52.25, 73.15, 64.38, 90.17, 69.00,
    66.67, 68.17, 58.61, 81.22, 68.44, 48.43, 64.03, 79.20, 56.87, 63.87, 65.81, 51.61, 69.24, 45.81, 96.52, 48.43,
    92.51, 51.13, 78.35, 55.00, 84.44, 54.84, 66.73, 50.91, 59.54, 55.03, 46.18, 47.49, 57.49, 60.44, 60.66, 63.18,
    86.64, 77.64, 48.06, 54.89, 74.80, 62.81, 69.44, 57.57, 48.89, 73.64, 48.21, 71.48, 46.76, 44.71, 80.85, 98.84,
    62.85, 66.17, 40.12, 81.53, 91.26, 87.55, 34.86, 78.85, 65.45, 86.63, 86.49, 59.62, 67.75, 73.78, 64.01, 48.91,
    45.49, 46.68, 60.73, 73.14, 90.70, 83.74, 54.84, 43.07, 83.36, 65.25, 39.45, 78.69, 91.29, 63.68, 79.53, 58.28,
    75.61, 61.11, 95.77, 63.65, 46.35, 57.83, 65.01, 47.35, 58.32, 90.34, 51.76, 47.82, 55.05, 55.16, 67.15, 83.72,
    51.42, 49.30, 73.63, 52.22, 69.20, 57.79, 66.34, 61.94, 39.03, 69.54, 62.34, 43.70, 61.80, 94.22, 72.08, 75.61,
    75.31, 72.52, 54.56, 91.41, 78.07, 62.75, 81.52, 72.51, 46.21, 77.82, 86.80, 28.60, 60.15, 67.22, 84.80, 50.44,
    80.81, 44.20, 41.63, 44.97, 35.04, 70.59, 66.74, 73.59, 62.55, 68.72, 59.18, 50.52, 69.45, 56.87, 66.53, 50.22,
    44.85, 77.74, 74.75, 54.99, 32.13, 47.61, 82.36, 75.72, 64.20, 56.74, 67.64, 54.52, 80.25, 67.14, 68.32, 62.22,
    62.85, 70.74, 74.36, 70.21, 78.71, 52.29, 58.61, 66.07, 41.01, 79.96, 58.53, 67.09, 61.15, 64.16, 57.38, 41.35,
    63.77, 72.29, 63.26, 64.61, 78.39, 70.55, 62.34, 67.47, 61.83, 54.64, 71.29, 76.16, 89.37, 83.39, 63.33, 54.75,
    53.90, 92.66, 48.28, 65.20, 66.36, 99.82, 45.28, 58.74, 52.79, 77.28, 74.30, 84.65, 55.28, 45.89, 49.93, 68.20,
    58.35, 78.12, 60.78, 66.63, 56.79, 72.15, 30.69, 31.04, 57.49, 63.36, 69.74, 79.54, 77.50, 62.81, 67.57, 88.13,
    66.44, 74.70, 84.31, 50.68, 66.65, 83.38, 60.09, 61.69, 77.17, 67.01, 80.43, 90.31, 69.07, 28.79, 56.98, 88.03,
    80.36, 62.28, 70.56, 67.40, 86.87, 83.08, 43.89, 60.62, 75.50, 53.97, 61.11, 68.11, 32.64, 45.64, 49.33, 57.42,
    66.48, 52.82, 48.84, 36.72, 58.91, 73.29, 44.08, 61.67, 62.77, 44.47, 95.99, 61.54, 51.65, 71.50, 30.86, 78.67,
    50.20, 56.55, 65.54, 63.57, 55.48, 92.79, 56.49, 61.06, 67.60, 84.19, 42.22, 55.51, 81.20, 90.62, 87.01, 60.21,
    95.09, 67.86, 56.70, 82.00, 67.00, 70.13, 58.54, 71.93, 69.46, 31.99, 87.38, 68.67, 58.11, 56.76, 47.84, 65.73,
    80.23, 49.38, 51.89, 36.23, 77.28, 81.88, 63.09, 75.44, 90.97, 76.15, 85.40, 79.77, 73.63, 56.33, 79.61, 54.58,
    52.79, 64.95, 74.75, 93.43, 42.55, 52.51, 51.56, 66.16, 79.11, 72.70, 74.01, 75.46, 72.44, 64.83, 55.40, 64.59
]

# Média e desvio padrão da amostra
sample_mean = 65.767
sample_std = 14.969

# Tamanho da amostra
n = len(dados)

# Média hipotética sob H0
mu_0 = 60

# Calculando o erro padrão
se = sample_std / np.sqrt(n)

# Calculando o z-score
z = (sample_mean - mu_0) / se

# Calculando o p-valor para uma cauda (H1: μ > 80)
p_value = 1 - stats.norm.cdf(z)

print(f"Estatística z: {z}")
print(f"Valor p: {p_value}")

z_critico = 2.575

# Interpretando os resultados
alpha = 0.01

if z < z_critico:
    print(f"Aceitamos a hipótese nula (H0). A média de utilização da CPU é significativamente menor que {mu_0}%.")
else:
    print(f"Falhamos em rejeitar a hipótese nula (H0). Não há evidência suficiente para afirmar que a média de utilização da CPU é menor que {mu_0}%.")

# Plotando a distribuição normal e os valores de z
x = np.linspace(-4, 4, 1000)
y = stats.norm.pdf(x, 0, 1)

plt.plot(x, y, label='Distribuição Normal')
plt.fill_between(x, 0, y, where=(x >= z_critico), color='red', alpha=0.5, label='Região Crítica')
plt.axvline(z, color='blue', linestyle='dashed', linewidth=2, label=f'z calculado = {z:.3f}')
plt.axvline(z_critico, color='red', linestyle='dashed', linewidth=2, label=f'z crítico = {z_critico}')

plt.title('Teste de Hipótese para Utilização de CPU')
plt.xlabel('Valor de z')
plt.ylabel('Densidade de Probabilidade')
plt.legend()
plt.show()
